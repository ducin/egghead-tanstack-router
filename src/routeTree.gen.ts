/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectsImport } from './routes/projects'
import { Route as EmployeesImport } from './routes/employees'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'
import { Route as EmployeesEmployeeIdIndexImport } from './routes/employees/$employeeId/index'

// Create/Update Routes

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesRoute = EmployeesImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  id: '/$projectId/',
  path: '/$projectId/',
  getParentRoute: () => ProjectsRoute,
} as any)

const EmployeesEmployeeIdIndexRoute = EmployeesEmployeeIdIndexImport.update({
  id: '/$employeeId/',
  path: '/$employeeId/',
  getParentRoute: () => EmployeesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/employees/$employeeId/': {
      id: '/employees/$employeeId/'
      path: '/$employeeId'
      fullPath: '/employees/$employeeId'
      preLoaderRoute: typeof EmployeesEmployeeIdIndexImport
      parentRoute: typeof EmployeesImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof ProjectsImport
    }
  }
}

// Create and export the route tree

interface EmployeesRouteChildren {
  EmployeesEmployeeIdIndexRoute: typeof EmployeesEmployeeIdIndexRoute
}

const EmployeesRouteChildren: EmployeesRouteChildren = {
  EmployeesEmployeeIdIndexRoute: EmployeesEmployeeIdIndexRoute,
}

const EmployeesRouteWithChildren = EmployeesRoute._addFileChildren(
  EmployeesRouteChildren,
)

interface ProjectsRouteChildren {
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/employees': typeof EmployeesRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/employees/$employeeId': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/employees': typeof EmployeesRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/employees/$employeeId': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/employees': typeof EmployeesRouteWithChildren
  '/projects': typeof ProjectsRouteWithChildren
  '/employees/$employeeId/': typeof EmployeesEmployeeIdIndexRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/employees'
    | '/projects'
    | '/employees/$employeeId'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/employees'
    | '/projects'
    | '/employees/$employeeId'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/employees'
    | '/projects'
    | '/employees/$employeeId/'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  EmployeesRoute: typeof EmployeesRouteWithChildren
  ProjectsRoute: typeof ProjectsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  EmployeesRoute: EmployeesRouteWithChildren,
  ProjectsRoute: ProjectsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/employees",
        "/projects"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/employees": {
      "filePath": "employees.tsx",
      "children": [
        "/employees/$employeeId/"
      ]
    },
    "/projects": {
      "filePath": "projects.tsx",
      "children": [
        "/projects/$projectId/"
      ]
    },
    "/employees/$employeeId/": {
      "filePath": "employees/$employeeId/index.tsx",
      "parent": "/employees"
    },
    "/projects/$projectId/": {
      "filePath": "projects/$projectId/index.tsx",
      "parent": "/projects"
    }
  }
}
ROUTE_MANIFEST_END */
